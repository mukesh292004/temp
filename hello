package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableFeignClients

public class EmployeeServicesApplication {

	public static void main(String[] args) {
		SpringApplication.run(EmployeeServicesApplication.class, args);
	}

}

package com.example.demo.controller;

import com.example.demo.model.Employee;
import com.example.demo.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/employees")
public class EmployeeController {

	@Autowired
	private EmployeeService employeeService;

	// http://localhost:8082/employees
	@PostMapping
	public Employee createEmployee(@RequestBody Employee employee) {
		return employeeService.saveEmployee(employee);
	}

	// http://localhost:8082/employees
	@GetMapping
	public List<Employee> getAllEmployees() {
		return employeeService.getAllEmployees();
	}

	// http://localhost:8082/employees/{id}
	@GetMapping("/{id}")
	public Optional<Employee> getEmployeeById(@PathVariable Integer id) {
		return employeeService.getEmployeeById(id);
	}

	// http://localhost:8082/employees/email/{email}
	@GetMapping("/email/{email}")
	public Optional<Employee> getEmployeeByEmail(@PathVariable String email) {
		return employeeService.getEmployeeByEmail(email);
	}

	// http://localhost:8082/employees/{id}
	@PutMapping("/{id}")
	public Employee updateEmployee(@PathVariable Integer id, @RequestBody Employee employeeDetails) {
		return employeeService.updateEmployee(id, employeeDetails);
	}

	// http://localhost:8082/employees/{id}
	@DeleteMapping("/{id}")
	public void deleteEmployee(@PathVariable Integer id) {
		employeeService.deleteEmployee(id);
	}

//	@GetMapping("/check/{id}")
//	public boolean doesEmployeeExist(@PathVariable Integer id) {
//	    return employeeService.getEmployeeById(id).isPresent();
//	}

	@GetMapping("/check/{id}/{name}/{email}/{role}")
	public boolean doesEmployeeExist(@PathVariable Integer id, @PathVariable String name, @PathVariable String email, @PathVariable String role) {
	    Optional<Employee> existingEmployee = employeeService.getEmployeeById(id);
	    if (existingEmployee.isPresent()) {
	        Employee fetchedEmployee = existingEmployee.get();
	        return fetchedEmployee.getName().equals(name) &&
	               fetchedEmployee.getEmail().equals(email) &&
	               fetchedEmployee.getRole().equals(role);
	    }
	    return false;
	}


}
package com.example.demo.feignclient;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "LEAVESERVICE", path = "/leave")
public interface LeaveClient {

    @PostMapping("/initialize/{employeeId}")
    void initializeLeaveBalance(@PathVariable("employeeId") int employeeId);
}


package com.example.demo.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @NotBlank(message = "Name is mandatory")
    private String name;

    @Email(message = "Email should be valid")
    @NotBlank(message = "Email is mandatory")
    private String email;

    @NotBlank(message = "Role is mandatory")
    private String role;

    @NotBlank(message = "Department is mandatory")
    private String department;

    @Pattern(regexp = "\\d{10}", message = "Contact must be a 10-digit number")
    private String contact;
}

package com.example.demo.repository;

import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import com.example.demo.model.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
	Optional<Employee> findByEmail(String email);
	
}

package com.example.demo.service;

import com.example.demo.model.Employee;

import java.util.List;
import java.util.Optional;
public interface EmployeeInterface {

	    Employee saveEmployee(Employee employee);

	    List<Employee> getAllEmployees();

	    Optional<Employee> getEmployeeById(Integer id);

	    Optional<Employee> getEmployeeByEmail(String email);

	    void deleteEmployee(Integer id);

	    Employee updateEmployee(Integer id, Employee employeeDetails);

	    boolean doesEmployeeExist(Integer id);
	}


package com.example.demo.service;

import com.example.demo.exception.BadRequestException;
import com.example.demo.exception.ConflictException;
import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.exception.ValidationException;
import com.example.demo.feignclient.LeaveClient;
import com.example.demo.model.Employee;
import com.example.demo.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService implements EmployeeInterface {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private LeaveClient leaveServiceClient;

    @Override
    public Employee saveEmployee(Employee employee) {
        // Check for duplicate email
        if (employeeRepository.findByEmail(employee.getEmail()).isPresent()) {
            throw new ConflictException("An employee with this email already exists.");
        }

        // Additional custom validation (optional)
        if (employee.getContact() != null && !employee.getContact().matches("\\d{10}")) {
            throw new ValidationException("Contact number must be a 10-digit number.");
        }

        Employee savedEmployee = employeeRepository.save(employee);
        leaveServiceClient.initializeLeaveBalance(savedEmployee.getId());
        return savedEmployee;
    }

    @Override
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    @Override
    public Optional<Employee> getEmployeeById(Integer id) {
        return employeeRepository.findById(id);
    }

    @Override
    public Optional<Employee> getEmployeeByEmail(String email) {
        return employeeRepository.findByEmail(email);
    }

    @Override
    public void deleteEmployee(Integer id) {
        if (!employeeRepository.existsById(id)) {
            throw new ResourceNotFoundException("Employee not found with id " + id);
        }
        employeeRepository.deleteById(id);
    }

    @Override
    public Employee updateEmployee(Integer id, Employee employeeDetails) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found with id " + id));

        if (!employee.getEmail().equals(employeeDetails.getEmail()) &&
                employeeRepository.findByEmail(employeeDetails.getEmail()).isPresent()) {
            throw new ConflictException("Another employee with this email already exists.");
        }

        employee.setName(employeeDetails.getName());
        employee.setEmail(employeeDetails.getEmail());
        employee.setRole(employeeDetails.getRole());
        employee.setDepartment(employeeDetails.getDepartment());
        employee.setContact(employeeDetails.getContact());

        return employeeRepository.save(employee);
    }

    @Override
    public boolean doesEmployeeExist(Integer id) {
        return employeeRepository.findById(id).isPresent();
    }
    
}

